//
// File generated by rootcint at Fri Dec 19 16:20:35 2014

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME TableDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "LIP/TauAnalysis/interface/TableDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::Column_spec< float > Column_speclEfloatgR;
      #else
      class Column_speclEfloatgR  :  public ::Column {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~Column_speclEfloatgR() throw() {};
         vector< float > data; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::Column_spec< short > Column_speclEshortgR;
      #else
      class Column_speclEshortgR  :  public ::Column {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~Column_speclEshortgR() throw() {};
         vector< short > data; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::Column_spec< double > Column_speclEdoublegR;
      #else
      class Column_speclEdoublegR  :  public ::Column {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~Column_speclEdoublegR() throw() {};
         vector< double > data; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::Column_spec< unsigned short > Column_speclEunsignedsPshortgR;
      #else
      class Column_speclEunsignedsPshortgR  :  public ::Column {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~Column_speclEunsignedsPshortgR() throw() {};
         vector< unsigned short > data; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::Column_spec< const char* > Column_speclEconstsPcharmUgR;
      #else
      class Column_speclEconstsPcharmUgR  :  public ::Column {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~Column_speclEconstsPcharmUgR() throw() {};
         vector< const char* > data; //
      };
      #endif

      #if !(defined(R__ACCESS_IN_SYMBOL) || defined(R__USE_SHADOW_CLASS))
      typedef ::Column_spec< ::TString > Column_speclETStringgR;
      #else
      class Column_speclETStringgR  :  public ::Column {
         public:
         //friend XX;
         // To force the creation of a virtual table, throw just in case.
         virtual ~Column_speclETStringgR() throw() {};
         vector< ::TString > data; //
      };
      #endif

   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void Column_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Column(void *p = 0);
   static void *newArray_Column(Long_t size, void *p);
   static void delete_Column(void *p);
   static void deleteArray_Column(void *p);
   static void destruct_Column(void *p);
   static void streamer_Column(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Column*)
   {
      ::Column *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Column >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Column", ::Column::Class_Version(), "./interface/Table.h", 10,
                  typeid(::Column), DefineBehavior(ptr, ptr),
                  &::Column::Dictionary, isa_proxy, 0,
                  sizeof(::Column) );
      instance.SetNew(&new_Column);
      instance.SetNewArray(&newArray_Column);
      instance.SetDelete(&delete_Column);
      instance.SetDeleteArray(&deleteArray_Column);
      instance.SetDestructor(&destruct_Column);
      instance.SetStreamerFunc(&streamer_Column);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Column*)
   {
      return GenerateInitInstanceLocal((::Column*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Column*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Table_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Table(void *p = 0);
   static void *newArray_Table(Long_t size, void *p);
   static void delete_Table(void *p);
   static void deleteArray_Table(void *p);
   static void destruct_Table(void *p);
   static void streamer_Table(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Table*)
   {
      ::Table *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Table >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Table", ::Table::Class_Version(), "./interface/Table.h", 74,
                  typeid(::Table), DefineBehavior(ptr, ptr),
                  &::Table::Dictionary, isa_proxy, 0,
                  sizeof(::Table) );
      instance.SetNew(&new_Table);
      instance.SetNewArray(&newArray_Table);
      instance.SetDelete(&delete_Table);
      instance.SetDeleteArray(&deleteArray_Table);
      instance.SetDestructor(&destruct_Table);
      instance.SetStreamerFunc(&streamer_Table);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Table*)
   {
      return GenerateInitInstanceLocal((::Table*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Table*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Column_speclEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void Column_speclEfloatgR_Dictionary();
   static void *new_Column_speclEfloatgR(void *p = 0);
   static void *newArray_Column_speclEfloatgR(Long_t size, void *p);
   static void delete_Column_speclEfloatgR(void *p);
   static void deleteArray_Column_speclEfloatgR(void *p);
   static void destruct_Column_speclEfloatgR(void *p);
   static void streamer_Column_speclEfloatgR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Column_spec<float>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::Column_spec<float>) == sizeof(::ROOT::Shadow::Column_speclEfloatgR));
      ::Column_spec<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Column_spec<float> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Column_spec<float>", ::Column_spec<float>::Class_Version(), "./interface/Table.h", 29,
                  typeid(::Column_spec<float>), DefineBehavior(ptr, ptr),
                  &Column_speclEfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(::Column_spec<float>) );
      instance.SetNew(&new_Column_speclEfloatgR);
      instance.SetNewArray(&newArray_Column_speclEfloatgR);
      instance.SetDelete(&delete_Column_speclEfloatgR);
      instance.SetDeleteArray(&deleteArray_Column_speclEfloatgR);
      instance.SetDestructor(&destruct_Column_speclEfloatgR);
      instance.SetStreamerFunc(&streamer_Column_speclEfloatgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Column_spec<float>*)
   {
      return GenerateInitInstanceLocal((::Column_spec<float>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Column_spec<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void Column_speclEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void Column_speclEshortgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void Column_speclEshortgR_Dictionary();
   static void *new_Column_speclEshortgR(void *p = 0);
   static void *newArray_Column_speclEshortgR(Long_t size, void *p);
   static void delete_Column_speclEshortgR(void *p);
   static void deleteArray_Column_speclEshortgR(void *p);
   static void destruct_Column_speclEshortgR(void *p);
   static void streamer_Column_speclEshortgR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Column_spec<short>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::Column_spec<short>) == sizeof(::ROOT::Shadow::Column_speclEshortgR));
      ::Column_spec<short> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Column_spec<short> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Column_spec<short>", ::Column_spec<short>::Class_Version(), "./interface/Table.h", 29,
                  typeid(::Column_spec<short>), DefineBehavior(ptr, ptr),
                  &Column_speclEshortgR_Dictionary, isa_proxy, 0,
                  sizeof(::Column_spec<short>) );
      instance.SetNew(&new_Column_speclEshortgR);
      instance.SetNewArray(&newArray_Column_speclEshortgR);
      instance.SetDelete(&delete_Column_speclEshortgR);
      instance.SetDeleteArray(&deleteArray_Column_speclEshortgR);
      instance.SetDestructor(&destruct_Column_speclEshortgR);
      instance.SetStreamerFunc(&streamer_Column_speclEshortgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Column_spec<short>*)
   {
      return GenerateInitInstanceLocal((::Column_spec<short>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Column_spec<short>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void Column_speclEshortgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<short>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void Column_speclEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void Column_speclEdoublegR_Dictionary();
   static void *new_Column_speclEdoublegR(void *p = 0);
   static void *newArray_Column_speclEdoublegR(Long_t size, void *p);
   static void delete_Column_speclEdoublegR(void *p);
   static void deleteArray_Column_speclEdoublegR(void *p);
   static void destruct_Column_speclEdoublegR(void *p);
   static void streamer_Column_speclEdoublegR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Column_spec<double>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::Column_spec<double>) == sizeof(::ROOT::Shadow::Column_speclEdoublegR));
      ::Column_spec<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Column_spec<double> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Column_spec<double>", ::Column_spec<double>::Class_Version(), "./interface/Table.h", 29,
                  typeid(::Column_spec<double>), DefineBehavior(ptr, ptr),
                  &Column_speclEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(::Column_spec<double>) );
      instance.SetNew(&new_Column_speclEdoublegR);
      instance.SetNewArray(&newArray_Column_speclEdoublegR);
      instance.SetDelete(&delete_Column_speclEdoublegR);
      instance.SetDeleteArray(&deleteArray_Column_speclEdoublegR);
      instance.SetDestructor(&destruct_Column_speclEdoublegR);
      instance.SetStreamerFunc(&streamer_Column_speclEdoublegR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Column_spec<double>*)
   {
      return GenerateInitInstanceLocal((::Column_spec<double>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Column_spec<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void Column_speclEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void Column_speclEunsignedsPshortgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void Column_speclEunsignedsPshortgR_Dictionary();
   static void *new_Column_speclEunsignedsPshortgR(void *p = 0);
   static void *newArray_Column_speclEunsignedsPshortgR(Long_t size, void *p);
   static void delete_Column_speclEunsignedsPshortgR(void *p);
   static void deleteArray_Column_speclEunsignedsPshortgR(void *p);
   static void destruct_Column_speclEunsignedsPshortgR(void *p);
   static void streamer_Column_speclEunsignedsPshortgR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Column_spec<unsigned short>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::Column_spec<unsigned short>) == sizeof(::ROOT::Shadow::Column_speclEunsignedsPshortgR));
      ::Column_spec<unsigned short> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Column_spec<unsigned short> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Column_spec<unsigned short>", ::Column_spec<unsigned short>::Class_Version(), "./interface/Table.h", 29,
                  typeid(::Column_spec<unsigned short>), DefineBehavior(ptr, ptr),
                  &Column_speclEunsignedsPshortgR_Dictionary, isa_proxy, 0,
                  sizeof(::Column_spec<unsigned short>) );
      instance.SetNew(&new_Column_speclEunsignedsPshortgR);
      instance.SetNewArray(&newArray_Column_speclEunsignedsPshortgR);
      instance.SetDelete(&delete_Column_speclEunsignedsPshortgR);
      instance.SetDeleteArray(&deleteArray_Column_speclEunsignedsPshortgR);
      instance.SetDestructor(&destruct_Column_speclEunsignedsPshortgR);
      instance.SetStreamerFunc(&streamer_Column_speclEunsignedsPshortgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Column_spec<unsigned short>*)
   {
      return GenerateInitInstanceLocal((::Column_spec<unsigned short>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Column_spec<unsigned short>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void Column_speclEunsignedsPshortgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<unsigned short>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void Column_speclEconstsPcharmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void Column_speclEconstsPcharmUgR_Dictionary();
   static void *new_Column_speclEconstsPcharmUgR(void *p = 0);
   static void *newArray_Column_speclEconstsPcharmUgR(Long_t size, void *p);
   static void delete_Column_speclEconstsPcharmUgR(void *p);
   static void deleteArray_Column_speclEconstsPcharmUgR(void *p);
   static void destruct_Column_speclEconstsPcharmUgR(void *p);
   static void streamer_Column_speclEconstsPcharmUgR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Column_spec<const char*>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::Column_spec<const char*>) == sizeof(::ROOT::Shadow::Column_speclEconstsPcharmUgR));
      ::Column_spec<const char*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Column_spec<const char*> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Column_spec<const char*>", ::Column_spec<const char*>::Class_Version(), "./interface/Table.h", 29,
                  typeid(::Column_spec<const char*>), DefineBehavior(ptr, ptr),
                  &Column_speclEconstsPcharmUgR_Dictionary, isa_proxy, 0,
                  sizeof(::Column_spec<const char*>) );
      instance.SetNew(&new_Column_speclEconstsPcharmUgR);
      instance.SetNewArray(&newArray_Column_speclEconstsPcharmUgR);
      instance.SetDelete(&delete_Column_speclEconstsPcharmUgR);
      instance.SetDeleteArray(&deleteArray_Column_speclEconstsPcharmUgR);
      instance.SetDestructor(&destruct_Column_speclEconstsPcharmUgR);
      instance.SetStreamerFunc(&streamer_Column_speclEconstsPcharmUgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Column_spec<const char*>*)
   {
      return GenerateInitInstanceLocal((::Column_spec<const char*>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Column_spec<const char*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void Column_speclEconstsPcharmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<const char*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   void Column_speclETStringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void Column_speclETStringgR_Dictionary();
   static void *new_Column_speclETStringgR(void *p = 0);
   static void *newArray_Column_speclETStringgR(Long_t size, void *p);
   static void delete_Column_speclETStringgR(void *p);
   static void deleteArray_Column_speclETStringgR(void *p);
   static void destruct_Column_speclETStringgR(void *p);
   static void streamer_Column_speclETStringgR(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Column_spec<TString>*)
   {
      // Make sure the shadow class has the right sizeof
      R__ASSERT(sizeof(::Column_spec<TString>) == sizeof(::ROOT::Shadow::Column_speclETStringgR));
      ::Column_spec<TString> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Column_spec<TString> >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Column_spec<TString>", ::Column_spec<TString>::Class_Version(), "./interface/Table.h", 29,
                  typeid(::Column_spec<TString>), DefineBehavior(ptr, ptr),
                  &Column_speclETStringgR_Dictionary, isa_proxy, 0,
                  sizeof(::Column_spec<TString>) );
      instance.SetNew(&new_Column_speclETStringgR);
      instance.SetNewArray(&newArray_Column_speclETStringgR);
      instance.SetDelete(&delete_Column_speclETStringgR);
      instance.SetDeleteArray(&deleteArray_Column_speclETStringgR);
      instance.SetDestructor(&destruct_Column_speclETStringgR);
      instance.SetStreamerFunc(&streamer_Column_speclETStringgR);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Column_spec<TString>*)
   {
      return GenerateInitInstanceLocal((::Column_spec<TString>*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Column_spec<TString>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void Column_speclETStringgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<TString>*)0x0)->GetClass();
   }

} // end of namespace ROOT

//______________________________________________________________________________
TClass *Column::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Column::Class_Name()
{
   return "Column";
}

//______________________________________________________________________________
const char *Column::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Column*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Column::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Column*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Column::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Column*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Column::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Column*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Table::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Table::Class_Name()
{
   return "Table";
}

//______________________________________________________________________________
const char *Table::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Table*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Table::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Table*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Table::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Table*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Table::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Table*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *Column_spec<float>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *Column_spec<float>::Class_Name()
{
   return "Column_spec<float>";
}

//______________________________________________________________________________
template <> const char *Column_spec<float>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<float>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int Column_spec<float>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<float>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void Column_spec<float>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<float>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *Column_spec<float>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<float>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *Column_spec<short>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *Column_spec<short>::Class_Name()
{
   return "Column_spec<short>";
}

//______________________________________________________________________________
template <> const char *Column_spec<short>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<short>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int Column_spec<short>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<short>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void Column_spec<short>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<short>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *Column_spec<short>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<short>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *Column_spec<double>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *Column_spec<double>::Class_Name()
{
   return "Column_spec<double>";
}

//______________________________________________________________________________
template <> const char *Column_spec<double>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<double>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int Column_spec<double>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<double>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void Column_spec<double>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<double>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *Column_spec<double>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<double>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *Column_spec<unsigned short>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *Column_spec<unsigned short>::Class_Name()
{
   return "Column_spec<unsigned short>";
}

//______________________________________________________________________________
template <> const char *Column_spec<unsigned short>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<unsigned short>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int Column_spec<unsigned short>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<unsigned short>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void Column_spec<unsigned short>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<unsigned short>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *Column_spec<unsigned short>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<unsigned short>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *Column_spec<const char*>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *Column_spec<const char*>::Class_Name()
{
   return "Column_spec<const char*>";
}

//______________________________________________________________________________
template <> const char *Column_spec<const char*>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<const char*>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int Column_spec<const char*>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<const char*>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void Column_spec<const char*>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<const char*>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *Column_spec<const char*>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<const char*>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
template <> TClass *Column_spec<TString>::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
template <> const char *Column_spec<TString>::Class_Name()
{
   return "Column_spec<TString>";
}

//______________________________________________________________________________
template <> const char *Column_spec<TString>::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<TString>*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
template <> int Column_spec<TString>::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<TString>*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
template <> void Column_spec<TString>::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<TString>*)0x0)->GetClass();
}

//______________________________________________________________________________
template <> TClass *Column_spec<TString>::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<TString>*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void Column::Streamer(TBuffer &R__b)
{
   // Stream an object of class Column.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      columntitle.Streamer(R__b);
      columnformat.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, Column::IsA());
   } else {
      R__c = R__b.WriteVersion(Column::IsA(), kTRUE);
      TObject::Streamer(R__b);
      columntitle.Streamer(R__b);
      columnformat.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void Column::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Column.
      TClass *R__cl = ::Column::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "columntitle", &columntitle);
      R__insp.InspectMember(columntitle, "columntitle.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "columnformat", &columnformat);
      R__insp.InspectMember(columnformat, "columnformat.");
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Column(void *p) {
      return  p ? new(p) ::Column : new ::Column;
   }
   static void *newArray_Column(Long_t nElements, void *p) {
      return p ? new(p) ::Column[nElements] : new ::Column[nElements];
   }
   // Wrapper around operator delete
   static void delete_Column(void *p) {
      delete ((::Column*)p);
   }
   static void deleteArray_Column(void *p) {
      delete [] ((::Column*)p);
   }
   static void destruct_Column(void *p) {
      typedef ::Column current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_Column(TBuffer &buf, void *obj) {
      ((::Column*)obj)->::Column::Streamer(buf);
   }
} // end of namespace ROOT for class ::Column

//______________________________________________________________________________
template <> void Column_spec<float>::Streamer(TBuffer &R__b)
{
   // Stream an object of class Column_spec<float>.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      Column::Streamer(R__b);
      {
         vector<float> &R__stl =  data;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            float R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, Column_spec<float>::IsA());
   } else {
      R__c = R__b.WriteVersion(Column_spec<float>::IsA(), kTRUE);
      Column::Streamer(R__b);
      {
         vector<float> &R__stl =  data;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<float>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void Column_speclEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class Column_spec<float>.
      typedef ::ROOT::Shadow::Column_speclEfloatgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<float>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "data", (void*)&sobj->data);
      R__insp.InspectMember("vector<float>", (void*)&sobj->data, "data.", false);
      sobj->Column::ShowMembers(R__insp);
   }

}

template <> void Column_spec<float>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::Column_speclEfloatgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Column_speclEfloatgR(void *p) {
      return  p ? new(p) ::Column_spec<float> : new ::Column_spec<float>;
   }
   static void *newArray_Column_speclEfloatgR(Long_t nElements, void *p) {
      return p ? new(p) ::Column_spec<float>[nElements] : new ::Column_spec<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_Column_speclEfloatgR(void *p) {
      delete ((::Column_spec<float>*)p);
   }
   static void deleteArray_Column_speclEfloatgR(void *p) {
      delete [] ((::Column_spec<float>*)p);
   }
   static void destruct_Column_speclEfloatgR(void *p) {
      typedef ::Column_spec<float> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_Column_speclEfloatgR(TBuffer &buf, void *obj) {
      ((::Column_spec<float>*)obj)->::Column_spec<float>::Streamer(buf);
   }
} // end of namespace ROOT for class ::Column_spec<float>

//______________________________________________________________________________
template <> void Column_spec<short>::Streamer(TBuffer &R__b)
{
   // Stream an object of class Column_spec<short>.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      Column::Streamer(R__b);
      {
         vector<short> &R__stl =  data;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            short R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, Column_spec<short>::IsA());
   } else {
      R__c = R__b.WriteVersion(Column_spec<short>::IsA(), kTRUE);
      Column::Streamer(R__b);
      {
         vector<short> &R__stl =  data;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<short>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void Column_speclEshortgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class Column_spec<short>.
      typedef ::ROOT::Shadow::Column_speclEshortgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<short>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "data", (void*)&sobj->data);
      R__insp.InspectMember("vector<short>", (void*)&sobj->data, "data.", false);
      sobj->Column::ShowMembers(R__insp);
   }

}

template <> void Column_spec<short>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::Column_speclEshortgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Column_speclEshortgR(void *p) {
      return  p ? new(p) ::Column_spec<short> : new ::Column_spec<short>;
   }
   static void *newArray_Column_speclEshortgR(Long_t nElements, void *p) {
      return p ? new(p) ::Column_spec<short>[nElements] : new ::Column_spec<short>[nElements];
   }
   // Wrapper around operator delete
   static void delete_Column_speclEshortgR(void *p) {
      delete ((::Column_spec<short>*)p);
   }
   static void deleteArray_Column_speclEshortgR(void *p) {
      delete [] ((::Column_spec<short>*)p);
   }
   static void destruct_Column_speclEshortgR(void *p) {
      typedef ::Column_spec<short> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_Column_speclEshortgR(TBuffer &buf, void *obj) {
      ((::Column_spec<short>*)obj)->::Column_spec<short>::Streamer(buf);
   }
} // end of namespace ROOT for class ::Column_spec<short>

//______________________________________________________________________________
template <> void Column_spec<double>::Streamer(TBuffer &R__b)
{
   // Stream an object of class Column_spec<double>.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      Column::Streamer(R__b);
      {
         vector<double> &R__stl =  data;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, Column_spec<double>::IsA());
   } else {
      R__c = R__b.WriteVersion(Column_spec<double>::IsA(), kTRUE);
      Column::Streamer(R__b);
      {
         vector<double> &R__stl =  data;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void Column_speclEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class Column_spec<double>.
      typedef ::ROOT::Shadow::Column_speclEdoublegR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<double>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "data", (void*)&sobj->data);
      R__insp.InspectMember("vector<double>", (void*)&sobj->data, "data.", false);
      sobj->Column::ShowMembers(R__insp);
   }

}

template <> void Column_spec<double>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::Column_speclEdoublegR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Column_speclEdoublegR(void *p) {
      return  p ? new(p) ::Column_spec<double> : new ::Column_spec<double>;
   }
   static void *newArray_Column_speclEdoublegR(Long_t nElements, void *p) {
      return p ? new(p) ::Column_spec<double>[nElements] : new ::Column_spec<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_Column_speclEdoublegR(void *p) {
      delete ((::Column_spec<double>*)p);
   }
   static void deleteArray_Column_speclEdoublegR(void *p) {
      delete [] ((::Column_spec<double>*)p);
   }
   static void destruct_Column_speclEdoublegR(void *p) {
      typedef ::Column_spec<double> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_Column_speclEdoublegR(TBuffer &buf, void *obj) {
      ((::Column_spec<double>*)obj)->::Column_spec<double>::Streamer(buf);
   }
} // end of namespace ROOT for class ::Column_spec<double>

//______________________________________________________________________________
template <> void Column_spec<unsigned short>::Streamer(TBuffer &R__b)
{
   // Stream an object of class Column_spec<unsigned short>.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      Column::Streamer(R__b);
      {
         vector<unsigned short> &R__stl =  data;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            unsigned short R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, Column_spec<unsigned short>::IsA());
   } else {
      R__c = R__b.WriteVersion(Column_spec<unsigned short>::IsA(), kTRUE);
      Column::Streamer(R__b);
      {
         vector<unsigned short> &R__stl =  data;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<unsigned short>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void Column_speclEunsignedsPshortgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class Column_spec<unsigned short>.
      typedef ::ROOT::Shadow::Column_speclEunsignedsPshortgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<unsigned short>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "data", (void*)&sobj->data);
      R__insp.InspectMember("vector<unsigned short>", (void*)&sobj->data, "data.", false);
      sobj->Column::ShowMembers(R__insp);
   }

}

template <> void Column_spec<unsigned short>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::Column_speclEunsignedsPshortgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Column_speclEunsignedsPshortgR(void *p) {
      return  p ? new(p) ::Column_spec<unsigned short> : new ::Column_spec<unsigned short>;
   }
   static void *newArray_Column_speclEunsignedsPshortgR(Long_t nElements, void *p) {
      return p ? new(p) ::Column_spec<unsigned short>[nElements] : new ::Column_spec<unsigned short>[nElements];
   }
   // Wrapper around operator delete
   static void delete_Column_speclEunsignedsPshortgR(void *p) {
      delete ((::Column_spec<unsigned short>*)p);
   }
   static void deleteArray_Column_speclEunsignedsPshortgR(void *p) {
      delete [] ((::Column_spec<unsigned short>*)p);
   }
   static void destruct_Column_speclEunsignedsPshortgR(void *p) {
      typedef ::Column_spec<unsigned short> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_Column_speclEunsignedsPshortgR(TBuffer &buf, void *obj) {
      ((::Column_spec<unsigned short>*)obj)->::Column_spec<unsigned short>::Streamer(buf);
   }
} // end of namespace ROOT for class ::Column_spec<unsigned short>

//______________________________________________________________________________
template <> void Column_spec<const char*>::Streamer(TBuffer &R__b)
{
   // Stream an object of class Column_spec<const char*>.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      Column::Streamer(R__b);
      {
         vector<const char*> &R__stl =  data;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(const char*));
         if (R__tcl1==0) {
            Error("data streamer","Missing the TClass object for const char*!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            const char* R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, Column_spec<const char*>::IsA());
   } else {
      R__c = R__b.WriteVersion(Column_spec<const char*>::IsA(), kTRUE);
      Column::Streamer(R__b);
      {
         vector<const char*> &R__stl =  data;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(const char*));
         if (R__tcl1==0) {
            Error("data streamer","Missing the TClass object for const char*!");
            return;
         }
            vector<const char*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((char*)&(*R__k),R__tcl1);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void Column_speclEconstsPcharmUgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class Column_spec<const char*>.
      typedef ::ROOT::Shadow::Column_speclEconstsPcharmUgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<const char*>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "data", (void*)&sobj->data);
      R__insp.InspectMember("vector<const char*>", (void*)&sobj->data, "data.", false);
      sobj->Column::ShowMembers(R__insp);
   }

}

template <> void Column_spec<const char*>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::Column_speclEconstsPcharmUgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Column_speclEconstsPcharmUgR(void *p) {
      return  p ? new(p) ::Column_spec<const char*> : new ::Column_spec<const char*>;
   }
   static void *newArray_Column_speclEconstsPcharmUgR(Long_t nElements, void *p) {
      return p ? new(p) ::Column_spec<const char*>[nElements] : new ::Column_spec<const char*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_Column_speclEconstsPcharmUgR(void *p) {
      delete ((::Column_spec<const char*>*)p);
   }
   static void deleteArray_Column_speclEconstsPcharmUgR(void *p) {
      delete [] ((::Column_spec<const char*>*)p);
   }
   static void destruct_Column_speclEconstsPcharmUgR(void *p) {
      typedef ::Column_spec<const char*> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_Column_speclEconstsPcharmUgR(TBuffer &buf, void *obj) {
      ((::Column_spec<const char*>*)obj)->::Column_spec<const char*>::Streamer(buf);
   }
} // end of namespace ROOT for class ::Column_spec<const char*>

//______________________________________________________________________________
template <> void Column_spec<TString>::Streamer(TBuffer &R__b)
{
   // Stream an object of class Column_spec<TString>.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      Column::Streamer(R__b);
      {
         vector<TString> &R__stl =  data;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            TString R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, Column_spec<TString>::IsA());
   } else {
      R__c = R__b.WriteVersion(Column_spec<TString>::IsA(), kTRUE);
      Column::Streamer(R__b);
      {
         vector<TString> &R__stl =  data;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<TString>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((TString&)(*R__k)).Streamer(R__b);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
namespace ROOT {
   void Column_speclETStringgR_ShowMembers(void *obj, TMemberInspector &R__insp)
   {
      // Inspect the data members of an object of class Column_spec<TString>.
      typedef ::ROOT::Shadow::Column_speclETStringgR ShadowClass;
      ShadowClass *sobj = (ShadowClass*)obj;
      if (sobj) { } // Dummy usage just in case there is no datamember.

      TClass *R__cl  = ::ROOT::GenerateInitInstanceLocal((const ::Column_spec<TString>*)0x0)->GetClass();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "data", (void*)&sobj->data);
      R__insp.InspectMember("vector<TString>", (void*)&sobj->data, "data.", false);
      sobj->Column::ShowMembers(R__insp);
   }

}

template <> void Column_spec<TString>::ShowMembers(TMemberInspector &R__insp)
{
   ::ROOT::Column_speclETStringgR_ShowMembers(this, R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Column_speclETStringgR(void *p) {
      return  p ? new(p) ::Column_spec<TString> : new ::Column_spec<TString>;
   }
   static void *newArray_Column_speclETStringgR(Long_t nElements, void *p) {
      return p ? new(p) ::Column_spec<TString>[nElements] : new ::Column_spec<TString>[nElements];
   }
   // Wrapper around operator delete
   static void delete_Column_speclETStringgR(void *p) {
      delete ((::Column_spec<TString>*)p);
   }
   static void deleteArray_Column_speclETStringgR(void *p) {
      delete [] ((::Column_spec<TString>*)p);
   }
   static void destruct_Column_speclETStringgR(void *p) {
      typedef ::Column_spec<TString> current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_Column_speclETStringgR(TBuffer &buf, void *obj) {
      ((::Column_spec<TString>*)obj)->::Column_spec<TString>::Streamer(buf);
   }
} // end of namespace ROOT for class ::Column_spec<TString>

//______________________________________________________________________________
void Table::Streamer(TBuffer &R__b)
{
   // Stream an object of class Table.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      {
         vector<Column*> &R__stl =  columns;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(Column));
         if (R__tcl1==0) {
            Error("columns streamer","Missing the TClass object for Column!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            Column* R__t;
            R__t = (Column*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, Table::IsA());
   } else {
      R__c = R__b.WriteVersion(Table::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      {
         vector<Column*> &R__stl =  columns;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Column*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void Table::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Table.
      TClass *R__cl = ::Table::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "columns", (void*)&columns);
      R__insp.InspectMember("vector<Column*>", (void*)&columns, "columns.", false);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Table(void *p) {
      return  p ? new(p) ::Table : new ::Table;
   }
   static void *newArray_Table(Long_t nElements, void *p) {
      return p ? new(p) ::Table[nElements] : new ::Table[nElements];
   }
   // Wrapper around operator delete
   static void delete_Table(void *p) {
      delete ((::Table*)p);
   }
   static void deleteArray_Table(void *p) {
      delete [] ((::Table*)p);
   }
   static void destruct_Table(void *p) {
      typedef ::Table current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_Table(TBuffer &buf, void *obj) {
      ((::Table*)obj)->::Table::Streamer(buf);
   }
} // end of namespace ROOT for class ::Table

namespace ROOT {
   void vectorlEColumnmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEColumnmUgR_Dictionary();
   static void *new_vectorlEColumnmUgR(void *p = 0);
   static void *newArray_vectorlEColumnmUgR(Long_t size, void *p);
   static void delete_vectorlEColumnmUgR(void *p);
   static void deleteArray_vectorlEColumnmUgR(void *p);
   static void destruct_vectorlEColumnmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<Column*>*)
   {
      vector<Column*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<Column*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<Column*>", -2, "prec_stl/vector", 49,
                  typeid(vector<Column*>), DefineBehavior(ptr, ptr),
                  0, &vectorlEColumnmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<Column*>) );
      instance.SetNew(&new_vectorlEColumnmUgR);
      instance.SetNewArray(&newArray_vectorlEColumnmUgR);
      instance.SetDelete(&delete_vectorlEColumnmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEColumnmUgR);
      instance.SetDestructor(&destruct_vectorlEColumnmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<Column*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<Column*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEColumnmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<Column*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEColumnmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Column*> : new vector<Column*>;
   }
   static void *newArray_vectorlEColumnmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Column*>[nElements] : new vector<Column*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEColumnmUgR(void *p) {
      delete ((vector<Column*>*)p);
   }
   static void deleteArray_vectorlEColumnmUgR(void *p) {
      delete [] ((vector<Column*>*)p);
   }
   static void destruct_vectorlEColumnmUgR(void *p) {
      typedef vector<Column*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<Column*>

namespace ROOT {
   void vectorlETStringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETStringgR_Dictionary();
   static void *new_vectorlETStringgR(void *p = 0);
   static void *newArray_vectorlETStringgR(Long_t size, void *p);
   static void delete_vectorlETStringgR(void *p);
   static void deleteArray_vectorlETStringgR(void *p);
   static void destruct_vectorlETStringgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<TString>*)
   {
      vector<TString> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TString>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TString>", -2, "prec_stl/vector", 49,
                  typeid(vector<TString>), DefineBehavior(ptr, ptr),
                  0, &vectorlETStringgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TString>) );
      instance.SetNew(&new_vectorlETStringgR);
      instance.SetNewArray(&newArray_vectorlETStringgR);
      instance.SetDelete(&delete_vectorlETStringgR);
      instance.SetDeleteArray(&deleteArray_vectorlETStringgR);
      instance.SetDestructor(&destruct_vectorlETStringgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<TString> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TString>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETStringgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<TString>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlETStringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TString> : new vector<TString>;
   }
   static void *newArray_vectorlETStringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TString>[nElements] : new vector<TString>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETStringgR(void *p) {
      delete ((vector<TString>*)p);
   }
   static void deleteArray_vectorlETStringgR(void *p) {
      delete [] ((vector<TString>*)p);
   }
   static void destruct_vectorlETStringgR(void *p) {
      typedef vector<TString> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<TString>

namespace ROOT {
   void vectorlEconstsPcharmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEconstsPcharmUgR_Dictionary();
   static void *new_vectorlEconstsPcharmUgR(void *p = 0);
   static void *newArray_vectorlEconstsPcharmUgR(Long_t size, void *p);
   static void delete_vectorlEconstsPcharmUgR(void *p);
   static void deleteArray_vectorlEconstsPcharmUgR(void *p);
   static void destruct_vectorlEconstsPcharmUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<const char*>*)
   {
      vector<const char*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<const char*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<const char*>", -2, "prec_stl/vector", 49,
                  typeid(vector<const char*>), DefineBehavior(ptr, ptr),
                  0, &vectorlEconstsPcharmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<const char*>) );
      instance.SetNew(&new_vectorlEconstsPcharmUgR);
      instance.SetNewArray(&newArray_vectorlEconstsPcharmUgR);
      instance.SetDelete(&delete_vectorlEconstsPcharmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEconstsPcharmUgR);
      instance.SetDestructor(&destruct_vectorlEconstsPcharmUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<const char*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<const char*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEconstsPcharmUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<const char*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEconstsPcharmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<const char*> : new vector<const char*>;
   }
   static void *newArray_vectorlEconstsPcharmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<const char*>[nElements] : new vector<const char*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEconstsPcharmUgR(void *p) {
      delete ((vector<const char*>*)p);
   }
   static void deleteArray_vectorlEconstsPcharmUgR(void *p) {
      delete [] ((vector<const char*>*)p);
   }
   static void destruct_vectorlEconstsPcharmUgR(void *p) {
      typedef vector<const char*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<const char*>

namespace ROOT {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "vector.dll", 0,
                  typeid(vector<double>), DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<double>

namespace ROOT {
   void vectorlEfloatgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEfloatgR_Dictionary();
   static void *new_vectorlEfloatgR(void *p = 0);
   static void *newArray_vectorlEfloatgR(Long_t size, void *p);
   static void delete_vectorlEfloatgR(void *p);
   static void deleteArray_vectorlEfloatgR(void *p);
   static void destruct_vectorlEfloatgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<float>*)
   {
      vector<float> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<float>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<float>", -2, "vector.dll", 0,
                  typeid(vector<float>), DefineBehavior(ptr, ptr),
                  0, &vectorlEfloatgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<float>) );
      instance.SetNew(&new_vectorlEfloatgR);
      instance.SetNewArray(&newArray_vectorlEfloatgR);
      instance.SetDelete(&delete_vectorlEfloatgR);
      instance.SetDeleteArray(&deleteArray_vectorlEfloatgR);
      instance.SetDestructor(&destruct_vectorlEfloatgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<float> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<float>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEfloatgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<float>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEfloatgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float> : new vector<float>;
   }
   static void *newArray_vectorlEfloatgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<float>[nElements] : new vector<float>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEfloatgR(void *p) {
      delete ((vector<float>*)p);
   }
   static void deleteArray_vectorlEfloatgR(void *p) {
      delete [] ((vector<float>*)p);
   }
   static void destruct_vectorlEfloatgR(void *p) {
      typedef vector<float> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<float>

namespace ROOT {
   void vectorlEshortgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEshortgR_Dictionary();
   static void *new_vectorlEshortgR(void *p = 0);
   static void *newArray_vectorlEshortgR(Long_t size, void *p);
   static void delete_vectorlEshortgR(void *p);
   static void deleteArray_vectorlEshortgR(void *p);
   static void destruct_vectorlEshortgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<short>*)
   {
      vector<short> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<short>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<short>", -2, "vector.dll", 0,
                  typeid(vector<short>), DefineBehavior(ptr, ptr),
                  0, &vectorlEshortgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<short>) );
      instance.SetNew(&new_vectorlEshortgR);
      instance.SetNewArray(&newArray_vectorlEshortgR);
      instance.SetDelete(&delete_vectorlEshortgR);
      instance.SetDeleteArray(&deleteArray_vectorlEshortgR);
      instance.SetDestructor(&destruct_vectorlEshortgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<short> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<short>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEshortgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<short>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEshortgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<short> : new vector<short>;
   }
   static void *newArray_vectorlEshortgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<short>[nElements] : new vector<short>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEshortgR(void *p) {
      delete ((vector<short>*)p);
   }
   static void deleteArray_vectorlEshortgR(void *p) {
      delete [] ((vector<short>*)p);
   }
   static void destruct_vectorlEshortgR(void *p) {
      typedef vector<short> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<short>

namespace ROOT {
   void vectorlEunsignedsPshortgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEunsignedsPshortgR_Dictionary();
   static void *new_vectorlEunsignedsPshortgR(void *p = 0);
   static void *newArray_vectorlEunsignedsPshortgR(Long_t size, void *p);
   static void delete_vectorlEunsignedsPshortgR(void *p);
   static void deleteArray_vectorlEunsignedsPshortgR(void *p);
   static void destruct_vectorlEunsignedsPshortgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<unsigned short>*)
   {
      vector<unsigned short> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<unsigned short>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<unsigned short>", -2, "vector.dll", 0,
                  typeid(vector<unsigned short>), DefineBehavior(ptr, ptr),
                  0, &vectorlEunsignedsPshortgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<unsigned short>) );
      instance.SetNew(&new_vectorlEunsignedsPshortgR);
      instance.SetNewArray(&newArray_vectorlEunsignedsPshortgR);
      instance.SetDelete(&delete_vectorlEunsignedsPshortgR);
      instance.SetDeleteArray(&deleteArray_vectorlEunsignedsPshortgR);
      instance.SetDestructor(&destruct_vectorlEunsignedsPshortgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<unsigned short> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<unsigned short>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEunsignedsPshortgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<unsigned short>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEunsignedsPshortgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned short> : new vector<unsigned short>;
   }
   static void *newArray_vectorlEunsignedsPshortgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<unsigned short>[nElements] : new vector<unsigned short>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEunsignedsPshortgR(void *p) {
      delete ((vector<unsigned short>*)p);
   }
   static void deleteArray_vectorlEunsignedsPshortgR(void *p) {
      delete [] ((vector<unsigned short>*)p);
   }
   static void destruct_vectorlEunsignedsPshortgR(void *p) {
      typedef vector<unsigned short> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<unsigned short>

/********************************************************
* TableDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableTableDict();

extern "C" void G__set_cpp_environmentTableDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("interface/Table.h");
  G__cpp_reset_tagtableTableDict();
}
#include <new>
extern "C" int G__cpp_dllrevTableDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* Column */
static int G__TableDict_442_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Column* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Column[n];
     } else {
       p = new((void*) gvp) Column[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Column;
     } else {
       p = new((void*) gvp) Column;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TableDictLN_Column));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_442_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 107, (long) ((const Column*) G__getstructoffset())->size());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_442_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const Column*) G__getstructoffset())->ls((const unsigned int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_442_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const Column*) G__getstructoffset())->Write(libp->para[0].ref ? *(FILE**) libp->para[0].ref : *(FILE**) (void*) (&G__Mlong(libp->para[0])), (const unsigned int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_442_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Column* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Column(*(TString*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Column(*(TString*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TableDictLN_Column));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_442_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Column::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_442_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Column::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_442_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Column::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_442_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Column::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_442_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Column*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_442_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Column::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_442_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Column::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_442_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Column::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_442_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Column::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TableDict_442_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Column* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Column(*(Column*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TableDictLN_Column));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Column G__TColumn;
static int G__TableDict_442_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Column*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Column*) (soff+(sizeof(Column)*i)))->~G__TColumn();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Column*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Column*) (soff))->~G__TColumn();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TableDict_442_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Column* dest = (Column*) G__getstructoffset();
   *dest = *(Column*) libp->para[0].ref;
   const Column& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Table */
static int G__TableDict_443_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Table* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Table((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) Table((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Table((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) Table((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Table[n];
       } else {
         p = new((void*) gvp) Table[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new Table;
       } else {
         p = new((void*) gvp) Table;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TableDictLN_Table));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_443_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Table*) G__getstructoffset())->FillFromLabeledHistogram((TH1D*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_443_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((const Table*) G__getstructoffset())->Save((const char*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((const Table*) G__getstructoffset())->Save();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_443_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const Table*) G__getstructoffset())->ls();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_443_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Table::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_443_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Table::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_443_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Table::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_443_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Table::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_443_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Table*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_443_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Table::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_443_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Table::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_443_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Table::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_443_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Table::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TableDict_443_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Table* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Table(*(Table*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TableDictLN_Table));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Table G__TTable;
static int G__TableDict_443_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Table*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Table*) (soff+(sizeof(Table)*i)))->~G__TTable();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Table*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Table*) (soff))->~G__TTable();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TableDict_443_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Table* dest = (Table*) G__getstructoffset();
   *dest = *(Table*) libp->para[0].ref;
   const Table& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Column_spec<float> */
static int G__TableDict_448_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Column_spec<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Column_spec<float>[n];
     } else {
       p = new((void*) gvp) Column_spec<float>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Column_spec<float>;
     } else {
       p = new((void*) gvp) Column_spec<float>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TableDictLN_Column_speclEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_448_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Column_spec<float>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Column_spec<float>(*(TString*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Column_spec<float>(*(TString*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TableDictLN_Column_speclEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_448_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const float& obj = ((Column_spec<float>*) G__getstructoffset())->operator[]((const unsigned int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_448_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Column_spec<float>*) G__getstructoffset())->push_back(*(float*) G__Floatref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_448_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Column_spec<float>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_448_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Column_spec<float>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_448_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Column_spec<float>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_448_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Column_spec<float>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_448_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Column_spec<float>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_448_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Column_spec<float>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_448_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Column_spec<float>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_448_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Column_spec<float>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_448_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Column_spec<float>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TableDict_448_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Column_spec<float>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Column_spec<float>(*(Column_spec<float>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TableDictLN_Column_speclEfloatgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Column_spec<float> G__TColumn_speclEfloatgR;
static int G__TableDict_448_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Column_spec<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Column_spec<float>*) (soff+(sizeof(Column_spec<float>)*i)))->~G__TColumn_speclEfloatgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Column_spec<float>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Column_spec<float>*) (soff))->~G__TColumn_speclEfloatgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TableDict_448_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Column_spec<float>* dest = (Column_spec<float>*) G__getstructoffset();
   *dest = *(Column_spec<float>*) libp->para[0].ref;
   const Column_spec<float>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Column_spec<short> */
static int G__TableDict_449_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Column_spec<short>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Column_spec<short>[n];
     } else {
       p = new((void*) gvp) Column_spec<short>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Column_spec<short>;
     } else {
       p = new((void*) gvp) Column_spec<short>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TableDictLN_Column_speclEshortgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_449_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Column_spec<short>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Column_spec<short>(*(TString*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Column_spec<short>(*(TString*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TableDictLN_Column_speclEshortgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_449_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const short& obj = ((Column_spec<short>*) G__getstructoffset())->operator[]((const unsigned int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 's', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_449_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Column_spec<short>*) G__getstructoffset())->push_back(*(short*) G__Shortref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_449_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Column_spec<short>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_449_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Column_spec<short>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_449_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Column_spec<short>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_449_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Column_spec<short>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_449_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Column_spec<short>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_449_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Column_spec<short>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_449_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Column_spec<short>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_449_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Column_spec<short>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_449_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Column_spec<short>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TableDict_449_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Column_spec<short>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Column_spec<short>(*(Column_spec<short>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TableDictLN_Column_speclEshortgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Column_spec<short> G__TColumn_speclEshortgR;
static int G__TableDict_449_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Column_spec<short>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Column_spec<short>*) (soff+(sizeof(Column_spec<short>)*i)))->~G__TColumn_speclEshortgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Column_spec<short>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Column_spec<short>*) (soff))->~G__TColumn_speclEshortgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TableDict_449_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Column_spec<short>* dest = (Column_spec<short>*) G__getstructoffset();
   *dest = *(Column_spec<short>*) libp->para[0].ref;
   const Column_spec<short>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Column_spec<double> */
static int G__TableDict_450_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Column_spec<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Column_spec<double>[n];
     } else {
       p = new((void*) gvp) Column_spec<double>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Column_spec<double>;
     } else {
       p = new((void*) gvp) Column_spec<double>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TableDictLN_Column_speclEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_450_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Column_spec<double>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Column_spec<double>(*(TString*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Column_spec<double>(*(TString*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TableDictLN_Column_speclEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_450_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const double& obj = ((Column_spec<double>*) G__getstructoffset())->operator[]((const unsigned int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_450_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Column_spec<double>*) G__getstructoffset())->push_back(*(double*) G__Doubleref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_450_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Column_spec<double>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_450_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Column_spec<double>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_450_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Column_spec<double>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_450_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Column_spec<double>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_450_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Column_spec<double>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_450_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Column_spec<double>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_450_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Column_spec<double>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_450_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Column_spec<double>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_450_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Column_spec<double>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TableDict_450_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Column_spec<double>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Column_spec<double>(*(Column_spec<double>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TableDictLN_Column_speclEdoublegR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Column_spec<double> G__TColumn_speclEdoublegR;
static int G__TableDict_450_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Column_spec<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Column_spec<double>*) (soff+(sizeof(Column_spec<double>)*i)))->~G__TColumn_speclEdoublegR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Column_spec<double>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Column_spec<double>*) (soff))->~G__TColumn_speclEdoublegR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TableDict_450_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Column_spec<double>* dest = (Column_spec<double>*) G__getstructoffset();
   *dest = *(Column_spec<double>*) libp->para[0].ref;
   const Column_spec<double>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Column_spec<unsigned short> */
static int G__TableDict_451_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Column_spec<unsigned short>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Column_spec<unsigned short>[n];
     } else {
       p = new((void*) gvp) Column_spec<unsigned short>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Column_spec<unsigned short>;
     } else {
       p = new((void*) gvp) Column_spec<unsigned short>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TableDictLN_Column_speclEunsignedsPshortgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_451_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Column_spec<unsigned short>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Column_spec<unsigned short>(*(TString*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Column_spec<unsigned short>(*(TString*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TableDictLN_Column_speclEunsignedsPshortgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_451_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const unsigned short& obj = ((Column_spec<unsigned short>*) G__getstructoffset())->operator[]((const unsigned int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'r', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_451_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Column_spec<unsigned short>*) G__getstructoffset())->push_back(*(unsigned short*) G__UShortref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_451_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Column_spec<unsigned short>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_451_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Column_spec<unsigned short>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_451_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Column_spec<unsigned short>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_451_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Column_spec<unsigned short>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_451_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Column_spec<unsigned short>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_451_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Column_spec<unsigned short>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_451_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Column_spec<unsigned short>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_451_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Column_spec<unsigned short>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_451_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Column_spec<unsigned short>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TableDict_451_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Column_spec<unsigned short>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Column_spec<unsigned short>(*(Column_spec<unsigned short>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TableDictLN_Column_speclEunsignedsPshortgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Column_spec<unsigned short> G__TColumn_speclEunsignedsPshortgR;
static int G__TableDict_451_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Column_spec<unsigned short>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Column_spec<unsigned short>*) (soff+(sizeof(Column_spec<unsigned short>)*i)))->~G__TColumn_speclEunsignedsPshortgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Column_spec<unsigned short>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Column_spec<unsigned short>*) (soff))->~G__TColumn_speclEunsignedsPshortgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TableDict_451_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Column_spec<unsigned short>* dest = (Column_spec<unsigned short>*) G__getstructoffset();
   *dest = *(Column_spec<unsigned short>*) libp->para[0].ref;
   const Column_spec<unsigned short>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Column_spec<const char*> */
static int G__TableDict_452_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Column_spec<const char*>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Column_spec<const char*>[n];
     } else {
       p = new((void*) gvp) Column_spec<const char*>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Column_spec<const char*>;
     } else {
       p = new((void*) gvp) Column_spec<const char*>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TableDictLN_Column_speclEconstsPcharmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_452_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Column_spec<const char*>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Column_spec<const char*>(*(TString*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Column_spec<const char*>(*(TString*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TableDictLN_Column_speclEconstsPcharmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_452_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const char*& obj = ((Column_spec<const char*>*) G__getstructoffset())->operator[]((const unsigned int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'C', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_452_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Column_spec<const char*>*) G__getstructoffset())->push_back(libp->para[0].ref ? *(const char**) libp->para[0].ref : *(const char**) (void*) (&G__Mlong(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_452_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Column_spec<const char*>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_452_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Column_spec<const char*>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_452_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Column_spec<const char*>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_452_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Column_spec<const char*>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_452_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Column_spec<const char*>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_452_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Column_spec<const char*>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_452_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Column_spec<const char*>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_452_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Column_spec<const char*>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_452_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Column_spec<const char*>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TableDict_452_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Column_spec<const char*>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Column_spec<const char*>(*(Column_spec<const char*>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TableDictLN_Column_speclEconstsPcharmUgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Column_spec<const char*> G__TColumn_speclEconstsPcharmUgR;
static int G__TableDict_452_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Column_spec<const char*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Column_spec<const char*>*) (soff+(sizeof(Column_spec<const char*>)*i)))->~G__TColumn_speclEconstsPcharmUgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Column_spec<const char*>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Column_spec<const char*>*) (soff))->~G__TColumn_speclEconstsPcharmUgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TableDict_452_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Column_spec<const char*>* dest = (Column_spec<const char*>*) G__getstructoffset();
   *dest = *(Column_spec<const char*>*) libp->para[0].ref;
   const Column_spec<const char*>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Column_spec<TString> */
static int G__TableDict_457_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Column_spec<TString>* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Column_spec<TString>[n];
     } else {
       p = new((void*) gvp) Column_spec<TString>[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Column_spec<TString>;
     } else {
       p = new((void*) gvp) Column_spec<TString>;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TableDictLN_Column_speclETStringgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_457_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Column_spec<TString>* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new Column_spec<TString>(*(TString*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) Column_spec<TString>(*(TString*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TableDictLN_Column_speclETStringgR));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_457_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((Column_spec<TString>*) G__getstructoffset())->operator[]((const unsigned int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_457_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Column_spec<TString>*) G__getstructoffset())->push_back(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_457_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Column_spec<TString>::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_457_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Column_spec<TString>::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_457_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Column_spec<TString>::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_457_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Column_spec<TString>::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_457_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Column_spec<TString>*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_457_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Column_spec<TString>::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_457_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Column_spec<TString>::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_457_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Column_spec<TString>::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TableDict_457_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Column_spec<TString>::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TableDict_457_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Column_spec<TString>* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Column_spec<TString>(*(Column_spec<TString>*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TableDictLN_Column_speclETStringgR));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Column_spec<TString> G__TColumn_speclETStringgR;
static int G__TableDict_457_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Column_spec<TString>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Column_spec<TString>*) (soff+(sizeof(Column_spec<TString>)*i)))->~G__TColumn_speclETStringgR();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Column_spec<TString>*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Column_spec<TString>*) (soff))->~G__TColumn_speclETStringgR();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TableDict_457_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Column_spec<TString>* dest = (Column_spec<TString>*) G__getstructoffset();
   *dest = *(Column_spec<TString>*) libp->para[0].ref;
   const Column_spec<TString>& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* Column */

/* Table */

/* Column_spec<float> */

/* Column_spec<short> */

/* Column_spec<double> */

/* Column_spec<unsigned short> */

/* Column_spec<const char*> */

/* Column_spec<TString> */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncTableDict {
 public:
  G__Sizep2memfuncTableDict(): p(&G__Sizep2memfuncTableDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncTableDict::*p)();
};

size_t G__get_sizep2memfuncTableDict()
{
  G__Sizep2memfuncTableDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceTableDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TableDictLN_Column))) {
     Column *G__Lderived;
     G__Lderived=(Column*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TableDictLN_Column),G__get_linked_tagnum(&G__TableDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TableDictLN_Table))) {
     Table *G__Lderived;
     G__Lderived=(Table*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TableDictLN_Table),G__get_linked_tagnum(&G__TableDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TableDictLN_Table),G__get_linked_tagnum(&G__TableDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TableDictLN_Column_speclEfloatgR))) {
     Column_spec<float> *G__Lderived;
     G__Lderived=(Column_spec<float>*)0x1000;
     {
       Column *G__Lpbase=(Column*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TableDictLN_Column_speclEfloatgR),G__get_linked_tagnum(&G__TableDictLN_Column),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TableDictLN_Column_speclEfloatgR),G__get_linked_tagnum(&G__TableDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TableDictLN_Column_speclEshortgR))) {
     Column_spec<short> *G__Lderived;
     G__Lderived=(Column_spec<short>*)0x1000;
     {
       Column *G__Lpbase=(Column*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TableDictLN_Column_speclEshortgR),G__get_linked_tagnum(&G__TableDictLN_Column),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TableDictLN_Column_speclEshortgR),G__get_linked_tagnum(&G__TableDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TableDictLN_Column_speclEdoublegR))) {
     Column_spec<double> *G__Lderived;
     G__Lderived=(Column_spec<double>*)0x1000;
     {
       Column *G__Lpbase=(Column*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TableDictLN_Column_speclEdoublegR),G__get_linked_tagnum(&G__TableDictLN_Column),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TableDictLN_Column_speclEdoublegR),G__get_linked_tagnum(&G__TableDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TableDictLN_Column_speclEunsignedsPshortgR))) {
     Column_spec<unsigned short> *G__Lderived;
     G__Lderived=(Column_spec<unsigned short>*)0x1000;
     {
       Column *G__Lpbase=(Column*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TableDictLN_Column_speclEunsignedsPshortgR),G__get_linked_tagnum(&G__TableDictLN_Column),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TableDictLN_Column_speclEunsignedsPshortgR),G__get_linked_tagnum(&G__TableDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TableDictLN_Column_speclEconstsPcharmUgR))) {
     Column_spec<const char*> *G__Lderived;
     G__Lderived=(Column_spec<const char*>*)0x1000;
     {
       Column *G__Lpbase=(Column*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TableDictLN_Column_speclEconstsPcharmUgR),G__get_linked_tagnum(&G__TableDictLN_Column),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TableDictLN_Column_speclEconstsPcharmUgR),G__get_linked_tagnum(&G__TableDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TableDictLN_Column_speclETStringgR))) {
     Column_spec<TString> *G__Lderived;
     G__Lderived=(Column_spec<TString>*)0x1000;
     {
       Column *G__Lpbase=(Column*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TableDictLN_Column_speclETStringgR),G__get_linked_tagnum(&G__TableDictLN_Column),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TableDictLN_Column_speclETStringgR),G__get_linked_tagnum(&G__TableDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableTableDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__TableDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TableDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TableDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TableDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TableDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__TableDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TableDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TableDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TableDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TableDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__TableDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__TableDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Column*>",117,G__get_linked_tagnum(&G__TableDictLN_vectorlEColumnmUcOallocatorlEColumnmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TableDictLN_reverse_iteratorlEvectorlEColumnmUcOallocatorlEColumnmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TableDictLN_vectorlEColumnmUcOallocatorlEColumnmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TableDictLN_reverse_iteratorlEvectorlEColumnmUcOallocatorlEColumnmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TableDictLN_vectorlEColumnmUcOallocatorlEColumnmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<const char*>",117,G__get_linked_tagnum(&G__TableDictLN_vectorlEconstsPcharmUcOallocatorlEconstsPcharmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TableDictLN_reverse_iteratorlEvectorlEconstsPcharmUcOallocatorlEconstsPcharmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TableDictLN_vectorlEconstsPcharmUcOallocatorlEconstsPcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TableDictLN_reverse_iteratorlEvectorlEconstsPcharmUcOallocatorlEconstsPcharmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TableDictLN_vectorlEconstsPcharmUcOallocatorlEconstsPcharmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__TableDictLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TableDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TableDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TableDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TableDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* Column */
static void G__setup_memvarColumn(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TableDictLN_Column));
   { Column *p; p=(Column*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TableDictLN_TString),-1,-1,2,"columntitle=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TableDictLN_TString),-1,-1,2,"columnformat=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TableDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Table */
static void G__setup_memvarTable(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TableDictLN_Table));
   { Table *p; p=(Table*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TableDictLN_vectorlEColumnmUcOallocatorlEColumnmUgRsPgR),G__defined_typename("vector<Column*>"),-1,4,"columns=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TableDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Column_spec<float> */
static void G__setup_memvarColumn_speclEfloatgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TableDictLN_Column_speclEfloatgR));
   { Column_spec<float> *p; p=(Column_spec<float>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TableDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR),G__defined_typename("vector<float>"),-1,4,"data=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TableDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Column_spec<short> */
static void G__setup_memvarColumn_speclEshortgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TableDictLN_Column_speclEshortgR));
   { Column_spec<short> *p; p=(Column_spec<short>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TableDictLN_vectorlEshortcOallocatorlEshortgRsPgR),G__defined_typename("vector<short>"),-1,4,"data=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TableDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Column_spec<double> */
static void G__setup_memvarColumn_speclEdoublegR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TableDictLN_Column_speclEdoublegR));
   { Column_spec<double> *p; p=(Column_spec<double>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TableDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"data=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TableDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Column_spec<unsigned short> */
static void G__setup_memvarColumn_speclEunsignedsPshortgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TableDictLN_Column_speclEunsignedsPshortgR));
   { Column_spec<unsigned short> *p; p=(Column_spec<unsigned short>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TableDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR),G__defined_typename("vector<unsigned short>"),-1,4,"data=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TableDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Column_spec<const char*> */
static void G__setup_memvarColumn_speclEconstsPcharmUgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TableDictLN_Column_speclEconstsPcharmUgR));
   { Column_spec<const char*> *p; p=(Column_spec<const char*>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TableDictLN_vectorlEconstsPcharmUcOallocatorlEconstsPcharmUgRsPgR),G__defined_typename("vector<const char*>"),-1,4,"data=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TableDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Column_spec<TString> */
static void G__setup_memvarColumn_speclETStringgR(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TableDictLN_Column_speclETStringgR));
   { Column_spec<TString> *p; p=(Column_spec<TString>*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TableDictLN_vectorlETStringcOallocatorlETStringgRsPgR),G__defined_typename("vector<TString>"),-1,4,"data=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TableDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarTableDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncColumn(void) {
   /* Column */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TableDictLN_Column));
   G__memfunc_setup("Column",622,G__TableDict_442_0_1, 105, G__get_linked_tagnum(&G__TableDictLN_Column), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTitle",802,(G__InterfaceMethod) NULL,67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("size",443,G__TableDict_442_0_3, 107, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ls",223,G__TableDict_442_0_4, 121, -1, -1, 0, 1, 1, 1, 8, "h - - 10 - ind", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Write",523,G__TableDict_442_0_5, 121, -1, -1, 0, 2, 1, 1, 8, 
"E - - 1 - - h - - 10 - ind", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Column",622,G__TableDict_442_0_6, 105, G__get_linked_tagnum(&G__TableDictLN_Column), -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TableDict_442_0_7, 85, G__get_linked_tagnum(&G__TableDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Column::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TableDict_442_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Column::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TableDict_442_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Column::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TableDict_442_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Column::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TableDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TableDict_442_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TableDict_442_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Column::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TableDict_442_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Column::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TableDict_442_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Column::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TableDict_442_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Column::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Column", 622, G__TableDict_442_0_19, (int) ('i'), G__get_linked_tagnum(&G__TableDictLN_Column), -1, 0, 1, 1, 1, 0, "u 'Column' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Column", 748, G__TableDict_442_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TableDict_442_0_21, (int) ('u'), G__get_linked_tagnum(&G__TableDictLN_Column), -1, 1, 1, 1, 1, 0, "u 'Column' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTable(void) {
   /* Table */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TableDictLN_Table));
   G__memfunc_setup("Table",488,G__TableDict_443_0_1, 105, G__get_linked_tagnum(&G__TableDictLN_Table), -1, 0, 2, 1, 1, 0, 
"C - - 10 '\"\"' - C - - 10 '\"\"' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FillFromLabeledHistogram",2418,G__TableDict_443_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TH1D' - 10 - histogram", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Save",399,G__TableDict_443_0_3, 121, -1, -1, 0, 1, 1, 1, 8, "C - - 10 '\"\"' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ls",223,G__TableDict_443_0_4, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TableDict_443_0_5, 85, G__get_linked_tagnum(&G__TableDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Table::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TableDict_443_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Table::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TableDict_443_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Table::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TableDict_443_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Table::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TableDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TableDict_443_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TableDict_443_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Table::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TableDict_443_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Table::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TableDict_443_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Table::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TableDict_443_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Table::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Table", 488, G__TableDict_443_0_17, (int) ('i'), G__get_linked_tagnum(&G__TableDictLN_Table), -1, 0, 1, 1, 1, 0, "u 'Table' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Table", 614, G__TableDict_443_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TableDict_443_0_19, (int) ('u'), G__get_linked_tagnum(&G__TableDictLN_Table), -1, 1, 1, 1, 1, 0, "u 'Table' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncColumn_speclEfloatgR(void) {
   /* Column_spec<float> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TableDictLN_Column_speclEfloatgR));
   G__memfunc_setup("Column_spec<float>",1800,G__TableDict_448_0_1, 105, G__get_linked_tagnum(&G__TableDictLN_Column_speclEfloatgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,(G__InterfaceMethod) NULL,107, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Column_spec<float>",1800,G__TableDict_448_0_3, 105, G__get_linked_tagnum(&G__TableDictLN_Column_speclEfloatgR), -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TableDict_448_0_4, 102, -1, -1, 1, 1, 1, 1, 0, "h - - 10 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__TableDict_448_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "f - - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ls",223,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "h - - 10 - ind", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Write",523,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 8, 
"E - - 1 - - h - - 10 - ind", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__TableDict_448_0_8, 85, G__get_linked_tagnum(&G__TableDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Column_spec<float>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TableDict_448_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Column_spec<float>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TableDict_448_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Column_spec<float>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TableDict_448_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Column_spec<float>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TableDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TableDict_448_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TableDict_448_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Column_spec<float>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TableDict_448_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Column_spec<float>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TableDict_448_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Column_spec<float>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TableDict_448_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Column_spec<float>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Column_spec<float>", 1800, G__TableDict_448_0_20, (int) ('i'), G__get_linked_tagnum(&G__TableDictLN_Column_speclEfloatgR), -1, 0, 1, 1, 1, 0, "u 'Column_spec<float>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Column_spec<float>", 1926, G__TableDict_448_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TableDict_448_0_22, (int) ('u'), G__get_linked_tagnum(&G__TableDictLN_Column_speclEfloatgR), -1, 1, 1, 1, 1, 0, "u 'Column_spec<float>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncColumn_speclEshortgR(void) {
   /* Column_spec<short> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TableDictLN_Column_speclEshortgR));
   G__memfunc_setup("Column_spec<short>",1826,G__TableDict_449_0_1, 105, G__get_linked_tagnum(&G__TableDictLN_Column_speclEshortgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,(G__InterfaceMethod) NULL,107, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Column_spec<short>",1826,G__TableDict_449_0_3, 105, G__get_linked_tagnum(&G__TableDictLN_Column_speclEshortgR), -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TableDict_449_0_4, 115, -1, -1, 1, 1, 1, 1, 0, "h - - 10 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__TableDict_449_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "s - - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ls",223,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "h - - 10 - ind", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Write",523,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 8, 
"E - - 1 - - h - - 10 - ind", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__TableDict_449_0_8, 85, G__get_linked_tagnum(&G__TableDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Column_spec<short>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TableDict_449_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Column_spec<short>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TableDict_449_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Column_spec<short>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TableDict_449_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Column_spec<short>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TableDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TableDict_449_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TableDict_449_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Column_spec<short>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TableDict_449_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Column_spec<short>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TableDict_449_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Column_spec<short>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TableDict_449_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Column_spec<short>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Column_spec<short>", 1826, G__TableDict_449_0_20, (int) ('i'), G__get_linked_tagnum(&G__TableDictLN_Column_speclEshortgR), -1, 0, 1, 1, 1, 0, "u 'Column_spec<short>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Column_spec<short>", 1952, G__TableDict_449_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TableDict_449_0_22, (int) ('u'), G__get_linked_tagnum(&G__TableDictLN_Column_speclEshortgR), -1, 1, 1, 1, 1, 0, "u 'Column_spec<short>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncColumn_speclEdoublegR(void) {
   /* Column_spec<double> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TableDictLN_Column_speclEdoublegR));
   G__memfunc_setup("Column_spec<double>",1901,G__TableDict_450_0_1, 105, G__get_linked_tagnum(&G__TableDictLN_Column_speclEdoublegR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,(G__InterfaceMethod) NULL,107, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Column_spec<double>",1901,G__TableDict_450_0_3, 105, G__get_linked_tagnum(&G__TableDictLN_Column_speclEdoublegR), -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TableDict_450_0_4, 100, -1, -1, 1, 1, 1, 1, 0, "h - - 10 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__TableDict_450_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ls",223,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "h - - 10 - ind", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Write",523,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 8, 
"E - - 1 - - h - - 10 - ind", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__TableDict_450_0_8, 85, G__get_linked_tagnum(&G__TableDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Column_spec<double>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TableDict_450_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Column_spec<double>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TableDict_450_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Column_spec<double>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TableDict_450_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Column_spec<double>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TableDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TableDict_450_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TableDict_450_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Column_spec<double>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TableDict_450_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Column_spec<double>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TableDict_450_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Column_spec<double>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TableDict_450_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Column_spec<double>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Column_spec<double>", 1901, G__TableDict_450_0_20, (int) ('i'), G__get_linked_tagnum(&G__TableDictLN_Column_speclEdoublegR), -1, 0, 1, 1, 1, 0, "u 'Column_spec<double>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Column_spec<double>", 2027, G__TableDict_450_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TableDict_450_0_22, (int) ('u'), G__get_linked_tagnum(&G__TableDictLN_Column_speclEdoublegR), -1, 1, 1, 1, 1, 0, "u 'Column_spec<double>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncColumn_speclEunsignedsPshortgR(void) {
   /* Column_spec<unsigned short> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TableDictLN_Column_speclEunsignedsPshortgR));
   G__memfunc_setup("Column_spec<unsigned short>",2719,G__TableDict_451_0_1, 105, G__get_linked_tagnum(&G__TableDictLN_Column_speclEunsignedsPshortgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,(G__InterfaceMethod) NULL,107, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Column_spec<unsigned short>",2719,G__TableDict_451_0_3, 105, G__get_linked_tagnum(&G__TableDictLN_Column_speclEunsignedsPshortgR), -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TableDict_451_0_4, 114, -1, -1, 1, 1, 1, 1, 0, "h - - 10 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__TableDict_451_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "r - - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ls",223,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "h - - 10 - ind", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Write",523,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 8, 
"E - - 1 - - h - - 10 - ind", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__TableDict_451_0_8, 85, G__get_linked_tagnum(&G__TableDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Column_spec<unsigned short>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TableDict_451_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Column_spec<unsigned short>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TableDict_451_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Column_spec<unsigned short>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TableDict_451_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Column_spec<unsigned short>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TableDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TableDict_451_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TableDict_451_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Column_spec<unsigned short>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TableDict_451_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Column_spec<unsigned short>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TableDict_451_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Column_spec<unsigned short>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TableDict_451_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Column_spec<unsigned short>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Column_spec<unsigned short>", 2719, G__TableDict_451_0_20, (int) ('i'), 
G__get_linked_tagnum(&G__TableDictLN_Column_speclEunsignedsPshortgR), -1, 0, 1, 1, 1, 0, "u 'Column_spec<unsigned short>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Column_spec<unsigned short>", 2845, G__TableDict_451_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TableDict_451_0_22, (int) ('u'), G__get_linked_tagnum(&G__TableDictLN_Column_speclEunsignedsPshortgR), -1, 1, 1, 1, 1, 0, "u 'Column_spec<unsigned short>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncColumn_speclEconstsPcharmUgR(void) {
   /* Column_spec<const char*> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TableDictLN_Column_speclEconstsPcharmUgR));
   G__memfunc_setup("Column_spec<const char*>",2305,G__TableDict_452_0_1, 105, G__get_linked_tagnum(&G__TableDictLN_Column_speclEconstsPcharmUgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,(G__InterfaceMethod) NULL,107, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Column_spec<const char*>",2305,G__TableDict_452_0_3, 105, G__get_linked_tagnum(&G__TableDictLN_Column_speclEconstsPcharmUgR), -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TableDict_452_0_4, 67, -1, -1, 1, 1, 1, 1, 1, "h - - 10 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__TableDict_452_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "C - - 51 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ls",223,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "h - - 10 - ind", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Write",523,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 8, 
"E - - 1 - - h - - 10 - ind", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__TableDict_452_0_8, 85, G__get_linked_tagnum(&G__TableDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Column_spec<const char*>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TableDict_452_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Column_spec<const char*>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TableDict_452_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Column_spec<const char*>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TableDict_452_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Column_spec<const char*>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TableDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TableDict_452_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TableDict_452_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Column_spec<const char*>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TableDict_452_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Column_spec<const char*>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TableDict_452_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Column_spec<const char*>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TableDict_452_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Column_spec<const char*>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Column_spec<const char*>", 2305, G__TableDict_452_0_20, (int) ('i'), 
G__get_linked_tagnum(&G__TableDictLN_Column_speclEconstsPcharmUgR), -1, 0, 1, 1, 1, 0, "u 'Column_spec<const char*>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Column_spec<const char*>", 2431, G__TableDict_452_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TableDict_452_0_22, (int) ('u'), G__get_linked_tagnum(&G__TableDictLN_Column_speclEconstsPcharmUgR), -1, 1, 1, 1, 1, 0, "u 'Column_spec<const char*>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncColumn_speclETStringgR(void) {
   /* Column_spec<TString> */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TableDictLN_Column_speclETStringgR));
   G__memfunc_setup("Column_spec<TString>",1981,G__TableDict_457_0_1, 105, G__get_linked_tagnum(&G__TableDictLN_Column_speclETStringgR), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("size",443,(G__InterfaceMethod) NULL,107, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Column_spec<TString>",1981,G__TableDict_457_0_3, 105, G__get_linked_tagnum(&G__TableDictLN_Column_speclETStringgR), -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TableDict_457_0_4, 117, G__get_linked_tagnum(&G__TableDictLN_TString), -1, 1, 1, 1, 1, 0, "h - - 10 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("push_back",944,G__TableDict_457_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ls",223,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "h - - 10 - ind", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Write",523,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 8, 
"E - - 1 - - h - - 10 - ind", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__TableDict_457_0_8, 85, G__get_linked_tagnum(&G__TableDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Column_spec<TString>::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TableDict_457_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Column_spec<TString>::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TableDict_457_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Column_spec<TString>::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TableDict_457_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Column_spec<TString>::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TableDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TableDict_457_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TableDict_457_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Column_spec<TString>::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TableDict_457_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Column_spec<TString>::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TableDict_457_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Column_spec<TString>::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TableDict_457_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Column_spec<TString>::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Column_spec<TString>", 1981, G__TableDict_457_0_20, (int) ('i'), G__get_linked_tagnum(&G__TableDictLN_Column_speclETStringgR), -1, 0, 1, 1, 1, 0, "u 'Column_spec<TString>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Column_spec<TString>", 2107, G__TableDict_457_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TableDict_457_0_22, (int) ('u'), G__get_linked_tagnum(&G__TableDictLN_Column_speclETStringgR), -1, 1, 1, 1, 1, 0, "u 'Column_spec<TString>' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncTableDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalTableDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcTableDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__TableDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__TableDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__TableDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__TableDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__TableDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__TableDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__TableDictLN_vectorlEshortcOallocatorlEshortgRsPgR = { "vector<short,allocator<short> >" , 99 , -1 };
G__linked_taginfo G__TableDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR = { "vector<unsigned short,allocator<unsigned short> >" , 99 , -1 };
G__linked_taginfo G__TableDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR = { "vector<float,allocator<float> >" , 99 , -1 };
G__linked_taginfo G__TableDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__TableDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__TableDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TableDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__TableDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TableDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__TableDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__TableDictLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G__TableDictLN_Column = { "Column" , 99 , -1 };
G__linked_taginfo G__TableDictLN_Table = { "Table" , 99 , -1 };
G__linked_taginfo G__TableDictLN_vectorlEColumnmUcOallocatorlEColumnmUgRsPgR = { "vector<Column*,allocator<Column*> >" , 99 , -1 };
G__linked_taginfo G__TableDictLN_reverse_iteratorlEvectorlEColumnmUcOallocatorlEColumnmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<Column*,allocator<Column*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TableDictLN_Column_speclEfloatgR = { "Column_spec<float>" , 99 , -1 };
G__linked_taginfo G__TableDictLN_Column_speclEshortgR = { "Column_spec<short>" , 99 , -1 };
G__linked_taginfo G__TableDictLN_Column_speclEdoublegR = { "Column_spec<double>" , 99 , -1 };
G__linked_taginfo G__TableDictLN_Column_speclEunsignedsPshortgR = { "Column_spec<unsigned short>" , 99 , -1 };
G__linked_taginfo G__TableDictLN_Column_speclEconstsPcharmUgR = { "Column_spec<const char*>" , 99 , -1 };
G__linked_taginfo G__TableDictLN_vectorlEconstsPcharmUcOallocatorlEconstsPcharmUgRsPgR = { "vector<const char*,allocator<const char*> >" , 99 , -1 };
G__linked_taginfo G__TableDictLN_reverse_iteratorlEvectorlEconstsPcharmUcOallocatorlEconstsPcharmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<const char*,allocator<const char*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TableDictLN_Column_speclETStringgR = { "Column_spec<TString>" , 99 , -1 };
G__linked_taginfo G__TableDictLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__TableDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableTableDict() {
  G__TableDictLN_TClass.tagnum = -1 ;
  G__TableDictLN_TBuffer.tagnum = -1 ;
  G__TableDictLN_TMemberInspector.tagnum = -1 ;
  G__TableDictLN_TObject.tagnum = -1 ;
  G__TableDictLN_TNamed.tagnum = -1 ;
  G__TableDictLN_TString.tagnum = -1 ;
  G__TableDictLN_vectorlEshortcOallocatorlEshortgRsPgR.tagnum = -1 ;
  G__TableDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR.tagnum = -1 ;
  G__TableDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR.tagnum = -1 ;
  G__TableDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__TableDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__TableDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TableDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__TableDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TableDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__TableDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__TableDictLN_TH1D.tagnum = -1 ;
  G__TableDictLN_Column.tagnum = -1 ;
  G__TableDictLN_Table.tagnum = -1 ;
  G__TableDictLN_vectorlEColumnmUcOallocatorlEColumnmUgRsPgR.tagnum = -1 ;
  G__TableDictLN_reverse_iteratorlEvectorlEColumnmUcOallocatorlEColumnmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TableDictLN_Column_speclEfloatgR.tagnum = -1 ;
  G__TableDictLN_Column_speclEshortgR.tagnum = -1 ;
  G__TableDictLN_Column_speclEdoublegR.tagnum = -1 ;
  G__TableDictLN_Column_speclEunsignedsPshortgR.tagnum = -1 ;
  G__TableDictLN_Column_speclEconstsPcharmUgR.tagnum = -1 ;
  G__TableDictLN_vectorlEconstsPcharmUcOallocatorlEconstsPcharmUgRsPgR.tagnum = -1 ;
  G__TableDictLN_reverse_iteratorlEvectorlEconstsPcharmUcOallocatorlEconstsPcharmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TableDictLN_Column_speclETStringgR.tagnum = -1 ;
  G__TableDictLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__TableDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableTableDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__TableDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__TableDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__TableDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__TableDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__TableDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__TableDictLN_TString);
   G__get_linked_tagnum_fwd(&G__TableDictLN_vectorlEshortcOallocatorlEshortgRsPgR);
   G__get_linked_tagnum_fwd(&G__TableDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR);
   G__get_linked_tagnum_fwd(&G__TableDictLN_vectorlEfloatcOallocatorlEfloatgRsPgR);
   G__get_linked_tagnum_fwd(&G__TableDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__TableDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__TableDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TableDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__TableDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TableDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TableDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__TableDictLN_TH1D);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TableDictLN_Column),sizeof(Column),-1,62720,(char*)NULL,G__setup_memvarColumn,G__setup_memfuncColumn);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TableDictLN_Table),sizeof(Table),-1,62720,(char*)NULL,G__setup_memvarTable,G__setup_memfuncTable);
   G__get_linked_tagnum_fwd(&G__TableDictLN_vectorlEColumnmUcOallocatorlEColumnmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__TableDictLN_reverse_iteratorlEvectorlEColumnmUcOallocatorlEColumnmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TableDictLN_Column_speclEfloatgR),sizeof(Column_spec<float>),-1,62720,(char*)NULL,G__setup_memvarColumn_speclEfloatgR,G__setup_memfuncColumn_speclEfloatgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TableDictLN_Column_speclEshortgR),sizeof(Column_spec<short>),-1,62720,(char*)NULL,G__setup_memvarColumn_speclEshortgR,G__setup_memfuncColumn_speclEshortgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TableDictLN_Column_speclEdoublegR),sizeof(Column_spec<double>),-1,62720,(char*)NULL,G__setup_memvarColumn_speclEdoublegR,G__setup_memfuncColumn_speclEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TableDictLN_Column_speclEunsignedsPshortgR),sizeof(Column_spec<unsigned short>),-1,62720,(char*)NULL,G__setup_memvarColumn_speclEunsignedsPshortgR,G__setup_memfuncColumn_speclEunsignedsPshortgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TableDictLN_Column_speclEconstsPcharmUgR),sizeof(Column_spec<const char*>),-1,62720,(char*)NULL,G__setup_memvarColumn_speclEconstsPcharmUgR,G__setup_memfuncColumn_speclEconstsPcharmUgR);
   G__get_linked_tagnum_fwd(&G__TableDictLN_vectorlEconstsPcharmUcOallocatorlEconstsPcharmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__TableDictLN_reverse_iteratorlEvectorlEconstsPcharmUcOallocatorlEconstsPcharmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TableDictLN_Column_speclETStringgR),sizeof(Column_spec<TString>),-1,62720,(char*)NULL,G__setup_memvarColumn_speclETStringgR,G__setup_memfuncColumn_speclETStringgR);
   G__get_linked_tagnum_fwd(&G__TableDictLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__TableDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupTableDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupTableDict()");
  G__set_cpp_environmentTableDict();
  G__cpp_setup_tagtableTableDict();

  G__cpp_setup_inheritanceTableDict();

  G__cpp_setup_typetableTableDict();

  G__cpp_setup_memvarTableDict();

  G__cpp_setup_memfuncTableDict();
  G__cpp_setup_globalTableDict();
  G__cpp_setup_funcTableDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncTableDict();
  return;
}
class G__cpp_setup_initTableDict {
  public:
    G__cpp_setup_initTableDict() { G__add_setup_func("TableDict",(G__incsetup)(&G__cpp_setupTableDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initTableDict() { G__remove_setup_func("TableDict"); }
};
G__cpp_setup_initTableDict G__cpp_setup_initializerTableDict;

